import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import React, { useState, useEffect, useRef } from "react";

import {
	motion,
	useScroll,
	useTransform,
	useSpring,
	MotionValue,
	useMotionValue,
	useVelocity,
	useAnimationFrame,
} from "framer-motion";
import LandingText from "../components/landingtext";
import { Nav, Title } from "../styles/styled";
import { wrap } from "@motionone/utils";

function useParallax(value, distance) {
	return useTransform(value, [0, 1], [-distance, distance]);
}

function ImageComponent({ id }) {
	const ref = useRef(null);
	const { scrollYProgress } = useScroll({ target: ref });
	const y = useParallax(scrollYProgress, 300);

	return (
		<div className="w-full flex justify-center">
			<section className=" ">
				<div ref={ref}>
					<motion.h2 style={{ y }}>
						<img src={"/1tag.png"} />
					</motion.h2>{" "}
				</div>

				<img src={`/${id}.png`} alt="A London skyscraper" />
			</section>
		</div>
	);
}

function ParallaxText({ children, baseVelocity = 100 }) {
	const baseX = useMotionValue(0);
	const { scrollY } = useScroll();
	const scrollVelocity = useVelocity(scrollY);
	const smoothVelocity = useSpring(scrollVelocity, {
		damping: 50,
		stiffness: 400,
	});
	const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {
		clamp: false,
	});

	/**
	 * This is a magic wrapping for the length of the text - you
	 * have to replace for wrapping that works for you or dynamically
	 * calculate
	 */
	const x = useTransform(baseX, (v) => `${wrap(-20, -45, v)}%`);

	const directionFactor = useRef(1);
	useAnimationFrame((t, delta) => {
		let moveBy = directionFactor.current * baseVelocity * (delta / 1000);

		/**
		 * This is what changes the direction of the scroll once we
		 * switch scrolling directions.
		 */
		if (velocityFactor.get() < 0) {
			directionFactor.current = -1;
		} else if (velocityFactor.get() > 0) {
			directionFactor.current = 1;
		}

		moveBy += directionFactor.current * moveBy * velocityFactor.get();

		baseX.set(baseX.get() + moveBy);
	});

	/**
	 * The number of times to repeat the child text should be dynamically calculated
	 * based on the size of the text and viewport. Likewise, the x motion value is
	 * currently wrapped between -20 and -45% - this 25% is derived from the fact
	 * we have four children (100% / 4). This would also want deriving from the
	 * dynamically generated number of children.
	 */
	return (
		<div className={styles.parallax}>
			<motion.div className={styles.scroller} style={{ x }}>
				<span>{children} </span>
				<span>{children} </span>
				<span>{children} </span>
				<span>{children} </span>
			</motion.div>
		</div>
	);
}

export default function Home() {
	const { scrollYProgress } = useScroll();
	const x = useTransform(scrollYProgress, [-0.01, 0.3], [0, 500]);

	const scaleX = useSpring(scrollYProgress, {
		stiffness: 100,
		damping: 30,
		restDelta: 0.001,
	});

	useEffect(() => {}, []);

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
				<link rel="preconnect" href="https://fonts.googleapis.com" />
				<link
					rel="preconnect"
					href="https://fonts.gstatic.com"
					crossOrigin="true"
				/>
				<link
					href="https://fonts.googleapis.com/css2?family=Noticia+Text:ital,wght@0,700;1,400&family=Source+Sans+Pro:900&display=swap"
					rel="stylesheet"
				/>
			</Head>

			<main className="  text-white">
				<div className="my-8 ">
					<motion.div
						className={styles.progressBar}
						style={{ scaleX: scrollYProgress }}
					/>
				</div>

				<div className="flex flex-col justify-between min-h-screen w-full group">
					<motion.div className={styles.progressbar} style={{ scaleX }} />
					<Nav>
						<a href="#">Home</a>
						<a href="#">Archive</a>
						<a href="#">Contact</a>
					</Nav>
					<div className="w-full flex justify-center">
						<div className="w-8/12">
							<LandingText />
						</div>
					</div>

					<div className="font-nokia text-[10em] font-semibold group-hover:text-red-600 tracking-tight">
						<Title style={{ x }}>SPRING EDITION 2022</Title>
					</div>
				</div>

				<div className="min-h-screen bg-white text-black">
					{[1].map((image) => (
						<div className="grid grid-cols-1 gap-y-20">
							<ImageComponent id={image} />
						</div>
					))}
				</div>

				<section className="w-full bg-white text-black">
					<ParallaxText baseVelocity={-5}>DISORIENTATION</ParallaxText>
					<ParallaxText baseVelocity={15}>READ NOW</ParallaxText>
				</section>
			</main>
		</>
	);
}
